// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: shard_snapshots_service.proto

package go_client

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ShardSnapshots_CreateShard_FullMethodName  = "/qdrant.ShardSnapshots/CreateShard"
	ShardSnapshots_ListShard_FullMethodName    = "/qdrant.ShardSnapshots/ListShard"
	ShardSnapshots_DeleteShard_FullMethodName  = "/qdrant.ShardSnapshots/DeleteShard"
	ShardSnapshots_RecoverShard_FullMethodName = "/qdrant.ShardSnapshots/RecoverShard"
)

// ShardSnapshotsClient is the client API for ShardSnapshots service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShardSnapshotsClient interface {
	// Create shard snapshot
	CreateShard(ctx context.Context, in *CreateShardSnapshotRequest, opts ...grpc.CallOption) (*CreateSnapshotResponse, error)
	// List shard snapshots
	ListShard(ctx context.Context, in *ListShardSnapshotsRequest, opts ...grpc.CallOption) (*ListSnapshotsResponse, error)
	// Delete shard snapshot
	DeleteShard(ctx context.Context, in *DeleteShardSnapshotRequest, opts ...grpc.CallOption) (*DeleteSnapshotResponse, error)
	// Recover shard snapshot
	RecoverShard(ctx context.Context, in *RecoverShardSnapshotRequest, opts ...grpc.CallOption) (*RecoverSnapshotResponse, error)
}

type shardSnapshotsClient struct {
	cc grpc.ClientConnInterface
}

func NewShardSnapshotsClient(cc grpc.ClientConnInterface) ShardSnapshotsClient {
	return &shardSnapshotsClient{cc}
}

func (c *shardSnapshotsClient) CreateShard(ctx context.Context, in *CreateShardSnapshotRequest, opts ...grpc.CallOption) (*CreateSnapshotResponse, error) {
	out := new(CreateSnapshotResponse)
	err := c.cc.Invoke(ctx, ShardSnapshots_CreateShard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shardSnapshotsClient) ListShard(ctx context.Context, in *ListShardSnapshotsRequest, opts ...grpc.CallOption) (*ListSnapshotsResponse, error) {
	out := new(ListSnapshotsResponse)
	err := c.cc.Invoke(ctx, ShardSnapshots_ListShard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shardSnapshotsClient) DeleteShard(ctx context.Context, in *DeleteShardSnapshotRequest, opts ...grpc.CallOption) (*DeleteSnapshotResponse, error) {
	out := new(DeleteSnapshotResponse)
	err := c.cc.Invoke(ctx, ShardSnapshots_DeleteShard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shardSnapshotsClient) RecoverShard(ctx context.Context, in *RecoverShardSnapshotRequest, opts ...grpc.CallOption) (*RecoverSnapshotResponse, error) {
	out := new(RecoverSnapshotResponse)
	err := c.cc.Invoke(ctx, ShardSnapshots_RecoverShard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShardSnapshotsServer is the server API for ShardSnapshots service.
// All implementations must embed UnimplementedShardSnapshotsServer
// for forward compatibility
type ShardSnapshotsServer interface {
	// Create shard snapshot
	CreateShard(context.Context, *CreateShardSnapshotRequest) (*CreateSnapshotResponse, error)
	// List shard snapshots
	ListShard(context.Context, *ListShardSnapshotsRequest) (*ListSnapshotsResponse, error)
	// Delete shard snapshot
	DeleteShard(context.Context, *DeleteShardSnapshotRequest) (*DeleteSnapshotResponse, error)
	// Recover shard snapshot
	RecoverShard(context.Context, *RecoverShardSnapshotRequest) (*RecoverSnapshotResponse, error)
	mustEmbedUnimplementedShardSnapshotsServer()
}

// UnimplementedShardSnapshotsServer must be embedded to have forward compatible implementations.
type UnimplementedShardSnapshotsServer struct {
}

func (UnimplementedShardSnapshotsServer) CreateShard(context.Context, *CreateShardSnapshotRequest) (*CreateSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShard not implemented")
}
func (UnimplementedShardSnapshotsServer) ListShard(context.Context, *ListShardSnapshotsRequest) (*ListSnapshotsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListShard not implemented")
}
func (UnimplementedShardSnapshotsServer) DeleteShard(context.Context, *DeleteShardSnapshotRequest) (*DeleteSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteShard not implemented")
}
func (UnimplementedShardSnapshotsServer) RecoverShard(context.Context, *RecoverShardSnapshotRequest) (*RecoverSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecoverShard not implemented")
}
func (UnimplementedShardSnapshotsServer) mustEmbedUnimplementedShardSnapshotsServer() {}

// UnsafeShardSnapshotsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShardSnapshotsServer will
// result in compilation errors.
type UnsafeShardSnapshotsServer interface {
	mustEmbedUnimplementedShardSnapshotsServer()
}

func RegisterShardSnapshotsServer(s grpc.ServiceRegistrar, srv ShardSnapshotsServer) {
	s.RegisterService(&ShardSnapshots_ServiceDesc, srv)
}

func _ShardSnapshots_CreateShard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShardSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShardSnapshotsServer).CreateShard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShardSnapshots_CreateShard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShardSnapshotsServer).CreateShard(ctx, req.(*CreateShardSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShardSnapshots_ListShard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListShardSnapshotsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShardSnapshotsServer).ListShard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShardSnapshots_ListShard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShardSnapshotsServer).ListShard(ctx, req.(*ListShardSnapshotsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShardSnapshots_DeleteShard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteShardSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShardSnapshotsServer).DeleteShard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShardSnapshots_DeleteShard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShardSnapshotsServer).DeleteShard(ctx, req.(*DeleteShardSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShardSnapshots_RecoverShard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecoverShardSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShardSnapshotsServer).RecoverShard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShardSnapshots_RecoverShard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShardSnapshotsServer).RecoverShard(ctx, req.(*RecoverShardSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShardSnapshots_ServiceDesc is the grpc.ServiceDesc for ShardSnapshots service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShardSnapshots_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "qdrant.ShardSnapshots",
	HandlerType: (*ShardSnapshotsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateShard",
			Handler:    _ShardSnapshots_CreateShard_Handler,
		},
		{
			MethodName: "ListShard",
			Handler:    _ShardSnapshots_ListShard_Handler,
		},
		{
			MethodName: "DeleteShard",
			Handler:    _ShardSnapshots_DeleteShard_Handler,
		},
		{
			MethodName: "RecoverShard",
			Handler:    _ShardSnapshots_RecoverShard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shard_snapshots_service.proto",
}
